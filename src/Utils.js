import { classMap } from 'lit-html/directives/class-map.js';

/** @typedef {import('@advanced-rest-client/arc-types').FormTypes.AmfFormItem} AmfFormItem */
/** @typedef {import('lit-html').Part} Part */

/**
 * Computes value for `renderEmptyMessage`.
 *
 * @param {boolean} allowCustom True if the form allows to add custom values.
 * @param {AmfFormItem[]} model Current model
 * @return {boolean} `true` when allowCustom is falsy set and model is empty
 */
export function canRenderEmptyMessage(allowCustom, model) {
  return !allowCustom && !model;
}

/**
 * Computes if model item is optional.
 * The items is always optional if is not required and when `hasOptional`
 * is set to `true`.
 *
 * @param {boolean} hasOptional [description]
 * @param {AmfFormItem=} model Model item.
 * @return {boolean} `true` if the model item is optional in the form.
 */
export function isOptional(hasOptional, model={name:'', value: ''}) {
  if (!hasOptional) {
    return false;
  }
  if (!model.schema || !model.schema.required) {
    return true;
  }
  return false;
}

/**
 * Computes if given model item is a custom property (not generated by
 * AMF model transformation).
 * @param {AmfFormItem=} model Model item.
 * @returns {boolean} `true` if `isCustom` property is set on model's schema property.
 */
export function isCustom(model={name:'', value: ''}) {
  if (!model.schema || !model.schema.isCustom) {
    return false;
  }
  return true;
}

/**
 * Computes value for `renderOptionalCheckbox` property.
 *
 * @param {boolean} render Value of `allowHideOptional` property
 * @param {boolean} has Value of `hasOptional` property.
 * @returns {boolean} True if both values are `true`.
 */
export function renderCheckbox(render, has) {
  return render && has;
}

/**
 * Computes if any of the parameters are required.
 * It iterates over the model to find any first element that has `required`
 * property set to `false`.
 *
 * @param {boolean} allowHideOptional State of `allowHideOptional` property.
 * If `false` this function always returns `false`.
 * @param {AmfFormItem[]} model Current model
 * @returns {boolean} `true` if model has at leas one element that is not required.
 */
export function hasOptionalParameters(allowHideOptional, model) {
  if (!allowHideOptional || !model) {
    return false;
  }
  return model.some((item) => item.schema && item.schema.required === false);
}

/**
 * Computes class name for each form item depending on the item state.
 *
 * This method to be overwritten by child classes.
 *
 * @param {AmfFormItem=} item Model item
 * @param {boolean=} allowHideOptional
 * @param {boolean=} optionalOpened True if optional parameters are rendered.
 * @param {boolean=} allowDisableParams
 * @returns {(part: Part) => void}
 */
export function rowClass(item={name:'', value: ''}, allowHideOptional, optionalOpened, allowDisableParams) {
  const { schema={} } = item;
  const info = {
    'param-value': true,
    required: schema.required,
    optional: !schema.required && !!allowHideOptional,
    'with-optional': optionalOpened,
    'has-enable-button': allowDisableParams,
  };
  return classMap(info);
}
